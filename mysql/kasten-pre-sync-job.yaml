apiVersion: batch/v1
kind: Job
metadata:
  generateName: kasten-pre-sync-
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "1"
spec:
  template:
    metadata:
      creationTimestamp: null
    spec:
      serviceAccountName: kasten-pre-sync
      containers:
       - image: ghcr.io/kanisterio/kanister-kubectl:1.18
         command:
           - sh
           - -o
           - errexit
           - -o
           - pipefail
           - -c
           - |
             # Create a backup policy using Kasten API
             kasten_api_url="10.48.70.250:32365/k10/#/"  # Adjust this URL based on your Kasten API endpoint
             backup_policy_name="mysqlapp-backup-policy-$(date +%Y%m%d%H%M%S)"
             cat <<EOF | curl -X POST -d @- -H "Content-Type: application/json" $kasten_api_url/config/policies
             {
               "apiVersion": "config.kio.kasten.io/v1alpha1",
               "kind": "Policy",
               "metadata": {
                 "name": "$backup_policy_name"
               },
               "spec": {
                 "action": "backup",
                 "namespaceSelector": {
                   "matchNames": [
                     "mysql"
                   ]
                 },
                 "schedule": {
                   "cronSchedule": "0 * * * *"
                 },
                 "retention": {
                   "hourly": 24,
                   "daily": 7,
                   "weekly": 4,
                   "monthly": 6,
                   "yearly": 2
                 },
                 "storageConfig": {
                   "profile": "mysql-test"
                 }
               }
             }
             EOF
            
             # Wait until the backup action is complete 
             count=30
             delay=3
             total_time=$((count*delay))
             while true 
             do
               state=$(kubectl get backupaction -n $NAMESPACE $backup_name -o jsonpath='{.status.state}')
               if [ "$state" =  "Complete" ]
               then 
                 echo "backup action $backup_name is Complete"                
                 break
               else 
                 echo "backup action $backup_name is ${state}"
                 count=$((count-1))
                 sleep $delay
               fi
               if [ $count = 0 ] 
               then 
                 echo "fail to get backup action $backup_name Complete after ${total_time} seconds"
                 exit 1 
               fi
             done 
         env:          
         - name: NAMESPACE
           valueFrom:
             fieldRef:
               fieldPath: metadata.namespace            
         name: backupper
      restartPolicy: Never
